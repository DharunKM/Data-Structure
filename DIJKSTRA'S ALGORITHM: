import heapq
def dijkstra(graph, start):
 dist = {node: float('inf') for node in graph}
 dist[start] = 0
 prev = {node: None for node in graph}
 pq = [(0, start)]
 while pq:
 curr_dist, node = heapq.heappop(pq)
 if curr_dist > dist[node]:
 continue
 for neighbor, weight in graph[node]:
 new_dist = curr_dist + weight
 if new_dist < dist[neighbor]:
 dist[neighbor] = new_dist
 prev[neighbor] = node
 heapq.heappush(pq, (new_dist, neighbor))
 def path(node):
 p = []
 while node:
 p.insert(0, node)
 node = prev[node]
 return p
 return {node: (dist[node], path(node)) for node in graph}
graph = {
 'A': [('B', 1), ('C', 4)],
 'B': [('C', 2), ('D', 5)],
 'C': [('D', 1)],
 'D': []
}
result = dijkstra(graph, 'A')
for node, (distance, p) in result.items():
 print(f"{node}: Distance = {distance}, Path = {' -> '.join(p)}")
